/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWERTY   0
#define NUMBER   1
#define SYMBOL   2
#define FUN      3
#define PAD      4

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUMBER SYMBOL>;
            then-layer = <FUN>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
        };
        combo_pad {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&mo PAD>;
        };
    };
};

/ {
    behaviors {
        // Easy alt-tab with alt+backspace thumb using mod-morphs
        // bstab: backspace_tab {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "BSPC_TAB";
        //     #binding-cells = <0>;
        //     bindings = <&kp BSPC>, <&kp TAB>;
        //     mods = <MOD_LALT>;
        // };
        // Swapper for smart alt+tab
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <21>;
        };
    };
}

&sk {
    // release-after-ms = <2000>;
    release-after-ms = <5000>;
    quick-release;
    // /delete-property/ ignore-modifiers;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                qwerty_layer {
                        label = "QWERTY";
                        bindings = <
   &kp LBKT    &kp Q     &kp W     &kp E     &kp R     &kp T      /**/    &kp Y      &kp U      &kp I         &kp O       &kp P        &kp LBKT
   &kp TAB     &kp A     &kp S     &kp D     &kp F     &kp G      /**/    &kp H      &kp J      &kp K         &kp L       &kp SEMI     &kp SQT
   &kp LBRC    &kp Z     &kp X     &kp C     &kp V     &kp B      /**/    &kp N      &kp M      &kp COMMA     &kp DOT     &kp FSLH     &kp RBRC
                                   &kp LGUI  &kp SPACE &mo NUMBER /**/    &mo SYMBOL  &kp BSPC   &kp RET
                        >;
                };

                /* left thumb */
                number_layer {
                        label = "NUMBER";
                        bindings = <
   &kp TAB     &kp N1       &kp N2       &kp N3       &kp N4       &kp N5       /**/  &kp N6         &kp N7    &kp N8    &kp N9    &kp N0      &trans
   &trans      &sk LALT     &sk LGUI     &sk LCTRL    &sk LSHIFT   &swapper     /**/  &kp LEFT       &kp DOWN  &kp UP    &kp RIGHT &kp TAB     &trans
                                                                   /* ∆∆∆ todo: this is swap window */
   &trans      &kp C_VOL_DN &kp C_PREV   &kp C_PP     &kp C_NEXT   &kp C_VOL_UP /**/  &trans         &trans    &trans    &trans    &kp BSLH    &trans
                                         &trans       &trans       &trans       /**/  &trans        &kp DEL      &trans
                        >;
                };

                /* right thumb */
                symbol_layer {
                        label = "SYMBOL";
                        bindings = <
   &trans    &kp EXCL  &kp AT    &kp HASH    &kp DLLR    &kp PRCNT   /**/   &kp CARET   &kp AMPS    &kp STAR    &kp LPAR    &kp RPAR    &trans
   &trans    &kp MINUS &kp EQUAL &kp PLUS    &kp PIPE    &kp TILDE   /**/   &none       &sk LSHIFT  &sk LCTRL   &sk LGUI    &sk LALT    &kp GRAVE
   &trans    &trans    &trans    &trans      &kp UNDER   &trans      /**/   &trans      &trans      &trans      &trans      &trans      &trans
                       &trans          &trans     &trans     /**/   &trans      &kp DEL      &trans
                        >;
                };

                /* both thumbs */
                fun_layer {
                        label = "FUN";
                        bindings = <
   &kp F1    &kp F2  &kp F3    &kp F4    &kp F5    &kp F6   /**/   &kp F7      &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
   &trans    &trans  &trans    &trans    &trans    &trans   /**/   &trans      &kp PG_DN     &kp PG_UP     &trans        &trans        &trans
   &trans    &trans  &trans    &trans    &trans    &trans   /**/   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                               &trans    &trans    &trans   /**/   &trans      &trans        &trans                                    
                        >;
                };

                /* combo */
                 pad_layer {
                         label = "PAD";
                         bindings = <
    &trans    &trans   &kp N1   &kp N2    &kp N3    &trans   /**/   &trans    &trans   &trans   &trans      &trans      &trans
    &trans    &kp N0   &kp N4   &kp N5    &kp N6    &trans   /**/   &trans    &trans   &trans   &trans      &trans      &trans
    &trans    &trans   &kp N7   &kp N8    &kp N9    &trans   /**/   &trans    &trans   &trans   &trans      &trans      &trans
                                &trans    &trans    &trans   /**/   &trans    &trans   &trans                                    
                         >;
                 };
        };
};
